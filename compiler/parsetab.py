
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA DIVIDE ID LBRACE LPAREN MINUS NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON TIMES TYPEfunction : TYPE ID LPAREN params RPAREN LBRACE statements RBRACEparams : TYPE ID\n              | TYPE ID COMMA params\n              | emptystatements : statement\n                  | statement statementsstatement : TYPE ID ASSIGN expression SEMICOLONstatement : expression SEMICOLONstatement : RETURN expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDempty :'
    
_lr_action_items = {'TYPE':([0,4,10,11,17,25,37,39,],[2,5,5,13,13,-8,-9,-7,]),'$end':([1,23,],[0,-1,]),'ID':([2,5,11,13,15,17,19,25,26,27,28,29,31,37,39,],[3,8,14,21,14,14,14,-8,14,14,14,14,14,-9,-7,]),'LPAREN':([3,11,15,17,19,25,26,27,28,29,31,37,39,],[4,15,15,15,15,-8,15,15,15,15,15,-9,-7,]),'RPAREN':([4,6,7,8,10,12,14,20,22,32,33,34,35,36,],[-17,9,-4,-2,-17,-3,-16,-15,32,-14,-10,-11,-12,-13,]),'COMMA':([8,],[10,]),'LBRACE':([9,],[11,]),'RETURN':([11,17,25,37,39,],[19,19,-8,-9,-7,]),'NUMBER':([11,15,17,19,25,26,27,28,29,31,37,39,],[20,20,20,20,-8,20,20,20,20,20,-9,-7,]),'SEMICOLON':([14,18,20,30,32,33,34,35,36,38,],[-16,25,-15,37,-14,-10,-11,-12,-13,39,]),'PLUS':([14,18,20,22,30,32,33,34,35,36,38,],[-16,26,-15,26,26,-14,26,26,26,26,26,]),'MINUS':([14,18,20,22,30,32,33,34,35,36,38,],[-16,27,-15,27,27,-14,27,27,27,27,27,]),'TIMES':([14,18,20,22,30,32,33,34,35,36,38,],[-16,28,-15,28,28,-14,28,28,28,28,28,]),'DIVIDE':([14,18,20,22,30,32,33,34,35,36,38,],[-16,29,-15,29,29,-14,29,29,29,29,29,]),'RBRACE':([16,17,24,25,37,39,],[23,-5,-6,-8,-9,-7,]),'ASSIGN':([21,],[31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function':([0,],[1,]),'params':([4,10,],[6,12,]),'empty':([4,10,],[7,7,]),'statements':([11,17,],[16,24,]),'statement':([11,17,],[17,17,]),'expression':([11,15,17,19,26,27,28,29,31,],[18,22,18,30,33,34,35,36,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> function","S'",1,None,None,None),
  ('function -> TYPE ID LPAREN params RPAREN LBRACE statements RBRACE','function',8,'p_function','parser.py',7),
  ('params -> TYPE ID','params',2,'p_params','parser.py',11),
  ('params -> TYPE ID COMMA params','params',4,'p_params','parser.py',12),
  ('params -> empty','params',1,'p_params','parser.py',13),
  ('statements -> statement','statements',1,'p_statements','parser.py',22),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',23),
  ('statement -> TYPE ID ASSIGN expression SEMICOLON','statement',5,'p_statement_assign','parser.py',30),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','parser.py',34),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','parser.py',38),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',42),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',43),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',44),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',45),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',49),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',53),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',57),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',61),
]
